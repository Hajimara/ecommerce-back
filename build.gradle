plugins {
    id 'java'  // Java 프로젝트
    id 'org.springframework.boot' version '3.2.1'  // Spring Boot 3.2.1 적용
    id 'io.spring.dependency-management' version '1.1.4'  // Spring 의존성 자동 관리
    id "org.asciidoctor.jvm.convert" version '4.0.1'  // Asciidoctor (API 문서 자동 생성)
}

group = 'com.shop'  // 프로젝트 패키지 이름
version = '0.0.1-SNAPSHOT'  // 프로젝트 버전
apply plugin: 'war'  // WAR 파일 생성 (Tomcat 배포 가능)

java {
    sourceCompatibility = '17' // 프로젝트의 Java 버전을 Java 17로 설정
}

configurations {
    compileOnly { // compileOnly → annotationProcessor 확장 (Lombok, MapStruct 같은 라이브러리 사용 가능)
        extendsFrom annotationProcessor
    }
    asciidoctorExt // asciidoctorExt → asciidoctor 관련 라이브러리 설정
}

repositories { // Maven Central 저장소에서 의존성 다운로드
    mavenCentral()
}

bootWar.enabled = false  // Spring Boot WAR 비활성화
war.enabled = true  // 일반 WAR 활성화

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'  // JPA (Hibernate)
    implementation 'org.springframework.boot:spring-boot-starter-web'  // REST API 개발용
    implementation 'org.springframework.boot:spring-boot-starter-webflux'  // 비동기 API (Reactive)
    implementation 'org.springframework.boot:spring-boot-starter-security'  // 보안 (로그인, JWT 인증)
    implementation 'org.springframework.boot:spring-boot-starter-validation'  // 데이터 검증 (@Valid, @NotNull 등 사용)

    implementation 'org.apache.commons:commons-lang3:3.12.0' // commons-lang3 (문자열, 날짜, 숫자 등 유틸)
    implementation 'org.apache.commons:commons-text:1.10.0' // 고급 문자열 처리 (플레이스홀더 치환, 랜덤 문자열 생성, 문자열 유사도 비교)

    implementation "com.googlecode.json-simple:json-simple:1.1.1" // JSON 처리

    // AWS SDK 사용 (S3 파일 업로드/다운로드 가능)
    implementation platform('software.amazon.awssdk:bom:2.21.1')
    implementation 'software.amazon.awssdk:s3'

    developmentOnly 'org.springframework.boot:spring-boot-devtools' // devtools → 코드 변경 시 자동 리로드
    runtimeOnly 'com.microsoft.sqlserver:mssql-jdbc' // mssql-jdbc → Microsoft SQL Server 연결
    // asciidoctor → API 문서 자동 생성
    asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.mockito:mockito-core:4.5.1'
    // lombok & MapStruct
    //	Lombok → @Getter, @Setter, @Builder 자동 생성
    //	MapStruct → DTO 변환 (Entity ↔ DTO)
    implementation 'org.mapstruct:mapstruct:1.5.5.Final'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'
    annotationProcessor 'org.projectlombok:lombok:1.18.28'
    annotationProcessor 'org.projectlombok:lombok-mapstruct-binding:0.2.0'
    // QueryDsl → 동적 쿼리 생성 가능 (BooleanBuilder 사용)
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"
    // jwt JWT 토큰 인증 (jjwt)
    implementation 'io.jsonwebtoken:jjwt-api:0.11.1'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.1'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.1'
    // tomcat Tomcat 설정 (WAR 배포)
    providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
    // excel
    implementation group: 'org.apache.poi', name: 'poi', version: '4.1.2'
    implementation group: 'org.apache.poi', name: 'poi-ooxml', version: '4.1.2'
}

// API 문서 자동화
ext {
    snippetsDir = file('build/generated-snippets')
}

asciidoctor {
    configurations 'asciidoctorExt'
    inputs.dir snippetsDir
    dependsOn test
}

// JUnit 5 (JUnit Platform) 사용
tasks.register('copyDocument', Copy) {
    dependsOn asciidoctor
    doFirst {
        delete file('src/main/resources/static/docs')
    }
    from file("build/docs/asciidoc")
    into file("src/main/resources/static/docs")
}

// build 태스크(Gradle 빌드 명령어 실행)가 실행될 때 copyDocument 작업을 먼저 실행하도록 설정
build {
    dependsOn copyDocument
}

// Spring Boot 애플리케이션을 JAR 파일로 패키징하는 작업
bootJar {
    dependsOn asciidoctor
    from ("${asciidoctor.outputDir}/html5") {
        into 'static/docs'
    }
}

// test 설정 (JUnit 5 + REST Docs)
test {
    useJUnitPlatform()
    outputs.dir snippetsDir
}
